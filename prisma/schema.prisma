// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genders {
  male
  female
}

enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique
  fullName          String
  email             String             @unique
  country           String
  city              String
  sponsorUsername   String             @default("GHC")
  phone             String             @unique
  password          String
  gender            Genders
  role              UserRole           @default(MEMBER)
  isBlocked         Boolean            @default(false)
  hasFunded         Boolean            @default(false)
  displayPhoto      String?
  bankName          String?
  accountNumber     Int?               @unique
  accountName       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  eWallet           Ewallet?
  leaderCycleBonus  LeaderCycleBonus?
  withdrawalWallet  WithdrawalWallet?
  salesIncomeBonus  SalesIncomeBonus?
  referrerIncome    ReferrerIncome?
  cycleWelcomeBonus CycleWelcomeBonus?
  testimonyBonus    TestimonyBonus?
  completionBonus   CompletionBonus?
  unclaimedRewards  UnclaimedRewards?
}

model Ewallet {
  id              Int    @id @default(autoincrement())
  virtualBankName String
  accountNumber   Int
  accountName     String
  balance         Float  @default(0.00)
  userId          Int    @unique
  User            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeaderCycleBonus {
  id      Int   @id @default(autoincrement())
  bronze  Float @default(0.00)
  gold    Float @default(0.00)
  diamond Float @default(0.00)
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WithdrawalWallet {
  id          Int   @id @default(autoincrement())
  bronze      Float @default(0.00)
  gold        Float @default(0.00)
  diamond     Float @default(0.00)
  leaderCycle Float @default(0.00)
  salesIncome Float @default(0.00)
  userId      Int   @unique
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SalesIncomeBonus {
  id     Int   @id @default(autoincrement())
  amount Float @default(0.00)
  userId Int   @unique
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReferrerIncome {
  id      Int   @id @default(autoincrement())
  bronze  Float @default(0.00)
  gold    Float @default(0.00)
  diamond Float @default(0.00)
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CycleWelcomeBonus {
  id      Int   @id @default(autoincrement())
  bronze  Float @default(0.00)
  gold    Float @default(0.00)
  diamond Float @default(0.00)
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestimonyBonus {
  id           Int   @id @default(autoincrement())
  bronze       Float @default(0.00)
  gold         Float @default(0.00)
  diamond      Float @default(0.00)
  bronzeCount  Int   @default(0)
  goldCount    Int   @default(0)
  diamondCount Int   @default(0)
  userId       Int   @unique
  user         User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompletionBonus {
  id      Int   @id @default(autoincrement())
  bronze  Float @default(0.00)
  gold    Float @default(0.00)
  diamond Float @default(0.00)
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UnclaimedRewards {
  id               Int   @id @default(autoincrement())
  bronze           Float @default(0.00)
  bronzeLostCount  Int   @default(0)
  gold             Float @default(0.00)
  goldLostCount    Int   @default(0)
  diamond          Float @default(0.00)
  diamondLostCount Int   @default(0)
  userId           Int   @unique
  user             User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}
