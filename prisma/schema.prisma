// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genders {
  male
  female
}

enum UserRole {
  ADMIN
  MEMBER
}

model Admin {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  password     String
  isSuperAdmin Boolean  @default(false)
  role         UserRole @default(ADMIN)
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  fullName          String
  email             String              @unique
  country           String
  city              String
  sponsorUsername   String              @default("GHC")
  sponsorId         Int                 @default(0)
  phone             String              @unique
  password          String
  gender            Genders
  role              UserRole            @default(MEMBER)
  isBlocked         Boolean             @default(false)
  hasFunded         Boolean             @default(false)
  isCycleLeader     Boolean             @default(false)
  emailVerified     Boolean             @default(false)
  displayPhoto      String?
  bankName          String?
  accountNumber     BigInt?             @unique
  accountName       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  eWallet           Ewallet?
  leaderCycleBonus  LeaderCycleBonus?
  withdrawalWallet  WithdrawalWallet?
  salesIncomeBonus  SalesIncomeBonus?
  referrerIncome    ReferrerIncome[]
  cycleWelcomeBonus CycleWelcomeBonus[]
  testimonyBonus    TestimonyBonus?
  completionBonus   CompletionBonus[]
  unclaimedRewards  UnclaimedRewards?
  bronze            Bronze?
  gold              Gold?
  diamond           Diamond?
  packageOrders     PackageOrder[]
  referrers         Referrers[]
}

model Ewallet {
  id              Int    @id @default(autoincrement())
  virtualBankName String
  accountNumber   BigInt
  accountName     String
  balance         Float  @default(0.00)
  userId          Int    @unique
  User            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeaderCycleBonus {
  id      Int   @id @default(autoincrement())
  bronze  Float @default(0.00)
  gold    Float @default(0.00)
  diamond Float @default(0.00)
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WithdrawalWallet {
  id          Int   @id @default(autoincrement())
  bronze      Float @default(0.00)
  gold        Float @default(0.00)
  diamond     Float @default(0.00)
  leaderCycle Float @default(0.00)
  salesIncome Float @default(0.00)
  userId      Int   @unique
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SalesIncomeBonus {
  id     Int   @id @default(autoincrement())
  amount Float @default(0.00)
  userId Int   @unique
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReferrerIncome {
  id      Int         @id @default(autoincrement())
  amount  Float       @default(0.00)
  package PackageType
  cycle   Int
  userId  Int
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CycleWelcomeBonus {
  id      Int         @id @default(autoincrement())
  amount  Float       @default(0.00)
  package PackageType
  cycle   Int
  userId  Int
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestimonyBonus {
  id           Int   @id @default(autoincrement())
  bronze       Float @default(0.00)
  gold         Float @default(0.00)
  diamond      Float @default(0.00)
  bronzeCount  Int   @default(0)
  goldCount    Int   @default(0)
  diamondCount Int   @default(0)
  userId       Int   @unique
  user         User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompletionBonus {
  id      Int         @id @default(autoincrement())
  amount  Float       @default(0.00)
  package PackageType
  cycle   Int
  userId  Int
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UnclaimedRewards {
  id               Int   @id @default(autoincrement())
  bronze           Float @default(0.00)
  bronzeLostCount  Int   @default(0)
  gold             Float @default(0.00)
  goldLostCount    Int   @default(0)
  diamond          Float @default(0.00)
  diamondLostCount Int   @default(0)
  userId           Int   @unique
  user             User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PackageType {
  DIAMOND
  GOLD
  BRONZE
}

model Bronze {
  id           Int      @id @default(autoincrement())
  totalCycle   Int      @default(0)
  currentCycle Int      @default(0)
  usedSlots    Int      @default(0)
  totalSlots   Int      @default(0)
  userId       Int      @unique
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Gold {
  id           Int      @id @default(autoincrement())
  totalCycle   Int      @default(0)
  currentCycle Int      @default(0)
  usedSlots    Int      @default(0)
  totalSlots   Int      @default(0)
  userId       Int      @unique
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Diamond {
  id           Int      @id @default(autoincrement())
  totalCycle   Int      @default(0)
  currentCycle Int      @default(0)
  usedSlots    Int      @default(0)
  totalSlots   Int      @default(0)
  userId       Int      @unique
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PackagePrice {
  id              Int      @id @default(autoincrement())
  bronze          Float
  gold            Float
  diamond         Float
  bronzeRefBonus  Float
  goldRefBonus    Float
  diamondRefBonus Float
  usdRate         Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  DELIVERED
}

model PackageOrder {
  id        Int         @id @default(autoincrement())
  status    OrderStatus @default(PENDING)
  package   PackageType
  cycle     Int
  userId    Int
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Referrers {
  id        Int         @id @default(autoincrement())
  package   PackageType
  first     String
  second    String?
  third     String?
  forth     String?
  fifth     String?
  sixth     String?
  userId    Int
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  photo       String
  slug        String   @unique
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  APPROVED
  DENIED
  PENDING
}

enum WithdrawalRequestWallets {
  DIAMOND
  BRONZE
  GOLD
  LEADERCYCLE
  SALESINCOME
}

model WithdrawalRequest {
  id        Int                      @id @default(autoincrement())
  amount    Int
  status    Status                   @default(PENDING)
  wallets   WithdrawalRequestWallets
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

model Contants {
  id                     Int      @id @default(1)
  bronze                 Float
  gold                   Float
  diamond                Float
  bronzeRefBonus         Float
  goldRefBonus           Float
  diamondRefBonus        Float
  bronzeWelcomeBonus     Float    @default(0.00)
  goldWelcomeBonus       Float    @default(0.00)
  diamondWelcomeBonus    Float    @default(0.00)
  bronzeCompletionBonus  Float    @default(0.00)
  goldCompletionBonus    Float    @default(0.00)
  diamondCompletionBonus Float    @default(0.00)
  bronzeThreshold        Float
  goldThreshold          Float
  diamondThreshold       Float
  leaderCycleThreshold   Float
  salesIncomeThreshold   Float
  usdRate                Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Sessions {
  sid    String   @id @default(cuid())
  sess   Json
  expire DateTime
}
