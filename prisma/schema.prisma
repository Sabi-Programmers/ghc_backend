// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Genders {
  male
  female
}

enum UserRole {
  ADMIN
  MEMBER
}

model Admin {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  email        String   @unique
  password     String
  isSuperAdmin Boolean  @default(false)
  role         UserRole @default(ADMIN)
}

model User {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  username               String                   @unique
  fullName               String
  email                  String                   @unique
  country                String
  city                   String
  sponsorUsername        String                   @default("GHC")
  sponsorId              Int                      @default(0)
  phone                  String
  password               String
  gender                 Genders
  role                   UserRole                 @default(MEMBER)
  hasFunded              Boolean                  @default(false)
  isCycleLeader          Boolean                  @default(false)
  emailVerified          Boolean                  @default(false)
  displayPhoto           String?
  bankName               String
  accountNumber          String                   @unique
  accountName            String                   @default("")
  accountFName           String?
  accountLName           String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  eWallet                Ewallet?
  cycleLeaderBonus       CycleLeaderBonus[]
  withdrawalWallet       WithdrawalWallet?
  salesIncomeBonus       SalesIncomeBonus[]
  referrerIncome         ReferrerIncome[]
  cycleWelcomeBonus      CycleWelcomeBonus[]
  testimonyBonus         TestimonyBonus?
  completionBonus        CompletionBonus[]
  unclaimedRewards       UnclaimedRewards?
  bronze                 Bronze?
  gold                   Gold?
  diamond                Diamond?
  packageOrders          PackageOrder[]
  referrers              Referrers[]
  WithdrawalWalletRecord WithdrawalWalletRecord[]
  TestimonyRecords       TestimonyRecords[]
  Bpc                    Bpc[]
  WithdrawalRequest      WithdrawalRequest[]
  ShopOrders             ShopOrders[]
  BlockedUser            BlockedUser?
  message                Message[]
}

model Transactions {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  collectionType         String
  amount                 Float
  depositorAccountNumber String
  depositorAccountName   String
  narration              String
  channel                String
  dateTime               DateTime
  accountNumber          String
  accountName            String
  transactionReference   String   @unique
  originatorBank         String
  description            String
  settlementReference    String   @unique
  sessionID              String   @unique
  uniqueIdentifier       String
}

model BlockedUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  status    Boolean  @default(false)
  reason    String?
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ewallet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  balance Float  @default(0.00)
  userId  String @unique
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WithdrawalWallet {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  bronze      Float  @default(0.00)
  gold        Float  @default(0.00)
  diamond     Float  @default(0.00)
  leaderCycle Float  @default(0.00)
  salesIncome Float  @default(0.00)
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProductType {
  DIGITAL
  PHYSICAL
}

model Product {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Float
  sellingPrice Float
  productType  ProductType
  slug         String       @unique
  category     String?
  description  String
  photo        String
  file         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ShopOrders   ShopOrders[]
}

model SalesIncomeBonus {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float       @default(0.00)
  agent       String
  productType ProductType
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
}

model CycleLeaderBonus {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  downlineName     String
  downlineUsername String
  amount           Float       @default(0.00)
  sponsorUsername  String
  generation       String
  package          PackageType
  userId           String      @db.ObjectId
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime    @default(now())
}

model ReferrerIncome {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float       @default(0.00)
  package   PackageType
  cycle     Int
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
}

model CycleWelcomeBonus {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float       @default(0.00)
  package   PackageType
  cycle     Int
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
}

model TestimonyBonus {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  bronze       Float  @default(0.00)
  gold         Float  @default(0.00)
  diamond      Float  @default(0.00)
  bronzeCount  Int    @default(0)
  goldCount    Int    @default(0)
  diamondCount Int    @default(0)
  userId       String @unique @db.ObjectId
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestimonyRecords {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float       @default(0.00)
  package         PackageType
  completedCycles Int         @default(0)
  lastPaidCycles  Int         @default(0)
  facebookLink    String?
  youtubeLink     String?
  tiktokLink      String?
  message         String?
  feedbackMessage String?
  status          Status      @default(PENDING)
  publish         Boolean     @default(false)
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model CompletionBonus {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float       @default(0.00)
  package   PackageType
  cycle     Int
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
}

model UnclaimedRewards {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  bronze           Float  @default(0.00)
  bronzeLostCount  Int    @default(0)
  gold             Float  @default(0.00)
  goldLostCount    Int    @default(0)
  diamond          Float  @default(0.00)
  diamondLostCount Int    @default(0)
  userId           String @unique @db.ObjectId
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PackageType {
  DIAMOND
  GOLD
  BRONZE
}

model Bronze {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  totalCycle   Int    @default(0)
  currentCycle Int    @default(0)
  usedSlots    Int    @default(0)
  totalSlots   Int    @default(0)
  userId       Int    @unique
  User         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gold {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  totalCycle   Int    @default(0)
  currentCycle Int    @default(0)
  usedSlots    Int    @default(0)
  totalSlots   Int    @default(0)
  userId       Int    @unique
  User         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Diamond {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  totalCycle   Int    @default(0)
  currentCycle Int    @default(0)
  usedSlots    Int    @default(0)
  totalSlots   Int    @default(0)
  userId       Int    @unique
  User         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  DELIVERED
}

model PackageOrder {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  status       OrderStatus @default(PENDING)
  package      PackageType
  cycle        Int
  deliveryNote String?
  userId       Int
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Referrers {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  package PackageType
  first   String
  second  String?
  third   String?
  forth   String?
  fifth   String?
  sixth   String?
  userId  Int
  User    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum IncomeType {
  cycle_welcome
  testimony
  referral
  completion
  cycle_leader
  sales_income
}

model WithdrawalWalletRecord {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?
  downlineName    String?
  sponsorUsername String?
  generation      String?
  salesAgent      String?
  amount          Float        @default(0.00)
  cycle           Int?
  incomeType      IncomeType
  package         PackageType?
  productType     ProductType?
  userId          Int
  User            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
}

model News {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  photo       String
  slug        String   @unique
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  APPROVED
  DENIED
  PENDING
}

enum WithdrawalRequestWallets {
  DIAMOND
  BRONZE
  GOLD
  LEADERCYCLE
  SALESINCOME
}

model WithdrawalRequest {
  id        String                   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  status    Status                   @default(PENDING)
  wallets   WithdrawalRequestWallets
  message   String?
  userId    Int
  User      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

model Bpc {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  facebookAdsLink    String?
  facebookAdsPhoto   String?
  facebookGroupLink  String?
  whatsappGroupPhoto String?
  zoomMeetingLink    String?
  youtubeVideoLink   String?
  tiktokVideoLink    String?
  signupUsernames    Json?
  userId             Int
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
}

enum ShopStatus {
  NOT_PAID
  PENDING
  DELIVERED
  PAYMENT_FAILED
}

model ShopOrders {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  Item      Product    @relation(fields: [itemId], references: [id])
  itemId    String
  Seller    User?      @relation(fields: [sellerId], references: [id])
  sellerId  Int?
  status    ShopStatus @default(NOT_PAID)
  amount    Float
  quantity  Int
  fullName  String
  phone     String
  email     String
  country   String
  city      String
  address   String
  tx_ref    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Contants {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  bankName               String   @default("")
  accountNumber          String   @default("")
  accountName            String   @default("")
  bronze                 Float
  gold                   Float
  diamond                Float
  bronzeRefBonus         Float
  goldRefBonus           Float
  diamondRefBonus        Float
  bronzeTestimonyBonus   Float    @default(0.00)
  goldTestimonyBonus     Float    @default(0.00)
  diamondTestimonyBonus  Float    @default(0.00)
  bronzeWelcomeBonus     Float    @default(0.00)
  goldWelcomeBonus       Float    @default(0.00)
  diamondWelcomeBonus    Float    @default(0.00)
  bronzeCompletionBonus  Float    @default(0.00)
  goldCompletionBonus    Float    @default(0.00)
  diamondCompletionBonus Float    @default(0.00)
  bronzeThreshold        Float
  goldThreshold          Float
  diamondThreshold       Float
  leaderCycleThreshold   Float
  salesIncomeThreshold   Float
  usdRate                Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

enum Sender {
  ADMIN
  USER
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    Sender
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  narration String
  unread    Boolean  @default(true)
  createdAt DateTime @default(now())
}

model OtpToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    Int
  token     String
  createAt  DateTime @default(now())
  expiresAt DateTime
}

model Sessions {
  sid    String   @id @default(auto()) @map("_id") @db.ObjectId
  sess   Json
  expire DateTime
}
